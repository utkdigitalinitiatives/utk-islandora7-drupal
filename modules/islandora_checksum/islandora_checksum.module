<?php

/**
 * @file
 * The main checksum module file. Contains most of the hook implementations.
 *
 * @todo Add uninstall hook to delete our the variables we set.
 */

/**
 * Implements hook_menu().
 */
function islandora_checksum_menu() {
  $items = array();
  $items['admin/islandora/tools/checksum'] = array(
    'title' => 'Checksum',
    'description' => 'Configure the Islandora Checksum creator.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('islandora_checksum_admin_form'),
    'file' => 'includes/admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_islandora_datastream_alter().
 */
function islandora_checksum_islandora_datastream_alter(AbstractObject $object, AbstractDatastream $datastream, &$context) {
  if ($context['action'] == 'ingest' && variable_get('islandora_checksum_enable_checksum', FALSE) && islandora_checksum_dsid_is_in_filter($datastream->id)) {
    $datastream->checksumType = variable_get('islandora_checksum_checksum_type', 'DISABLED');
  }
}

/**
 * Implements hook_islandora_derivative_alter().
 */
function islandora_checksum_islandora_derivative_alter(&$derivatives, AbstractObject $object = NULL, $ds_modified_params = array()) {
  if (!empty($ds_modified_params) && variable_get('islandora_checksum_deriv_regeneration_bypass', FALSE)) {
    // When only the checksumType is modified, we don't want to trigger
    // derivative regeneration.
    $diff = array_diff_key($ds_modified_params, array(
      'checksumType' => NULL,
      'dateLastModified' => NULL,
      'dsid' => NULL,
    ));
    if (empty($diff)) {
      $derivatives = array();
    }
  }
}

/**
 * Query the resource index to get a list of collections.
 *
 * @return array
 *   List of collection PIDs.
 */
function islandora_checksum_get_collections() {
  module_load_include('inc', 'islandora_basic_collection', 'includes/utilities');
  $root = islandora_object_load(variable_get('islandora_repository_pid', 'islandora:root'));
  return islandora_basic_collection_get_other_collections_as_form_options($root);
}

/**
 * Query the RI index for collection member details.
 *
 * @param string $pid
 *   The PID of Islandora collection.
 * @param bool $count
 *   Whether this is a countQuery or not.
 * @param int $limit
 *   The number of items to return.
 * @param array $slice_params
 *   An optional associative array of parameters to pass in to properly grab
 *   the slice, including:
 *   - 'offset_date': an ISO8601 date to filter items before
 *   - 'offset_pid': a PID to filter items before if dates match.
 *
 * @return array
 *   Associative array of RI results, containg the 'object' as the object PID,
 *   and the 'date' as the object's createdDate.
 */
function islandora_checksum_get_collection_member_details($pid, $count = FALSE, $limit = 10, $slice_params = array()) {
  // List of objects to create checksums for.
  $members = array();
  // Query the rindex to get all the objects that have a 'isMemberOfCollection'
  // relationship with the specified collection and add all their PIDs to the
  // list.
  $tuque = islandora_get_tuque_connection();
  $islandora_rels_ext = ISLANDORA_RELS_EXT_URI;
  $ri_query = <<<EOF
PREFIX xs: <xml-schema:>
SELECT DISTINCT ?object ?date
FROM <#ri>
WHERE {
  {
    ?object <fedora-rels-ext:isMemberOfCollection> <info:fedora/$pid> .
  } UNION {
    ?object <{$islandora_rels_ext}isPageOf> ?book .
    ?book <fedora-rels-ext:isMemberOfCollection> <info:fedora/$pid> .
  } UNION {
    ?object <fedora-rels-ext:isConstituentOf> ?compound .
    ?compound <fedora-rels-ext:isMemberOfCollection> <info:fedora/$pid> .
  } UNION {
    ?object <fedora-rels-ext:isMemberOf> ?issue .
    ?issue <fedora-rels-ext:isMemberOf> ?newspaper .
    ?newspaper <fedora-rels-ext:isMemberOfCollection> <info:fedora/$pid> .
  }
  ?object <fedora-model:createdDate> ?date .
EOF;
  if ($slice_params) {
    $ri_query .= <<<EOF
  FILTER(?date > '{$slice_params['offset_date']}'^^xs:dateTime || (?date = '{$slice_params['offset_date']}'^^xs:dateTime && xs:string(?object) > xs:string('info:fedora/{$slice_params['offset_pid']}')))
}
ORDER BY ASC(?date) ASC(?object)
EOF;
  }
  else {
    $ri_query .= <<<EOF
}
EOF;
  }
  if ($count) {
    return $tuque->repository->ri->countQuery($ri_query, 'sparql');
  }
  return $tuque->repository->ri->sparqlQuery($ri_query, $limit);
}

/**
 * Custom button submit handler.
 */
function islandora_checksum_apply_retro($form, &$form_state) {
  batch_set(islandora_checksum_get_collection_checksum_update_batch($form_state['values']['collection']));
}

/**
 * Gets the batch definition for enabling or re-applying checksums.
 *
 * @param string $collection_pid
 *   The PID of the collection to apply checksums to.
 * @param int $limit
 *   The number of items to do per-batch.
 * @param array $dsids
 *   The DSIDs to apply checksums to. Leave empty to use the default
 *   configuration.
 *
 * @return array
 *   The batch definition.
 */
function islandora_checksum_get_collection_checksum_update_batch($collection_pid, $limit = 10, $dsids = array()) {
  if (empty($dsids)) {
    $dsids = islandora_checksum_unpack_dsid_filter();
  }
  return array(
    'operations' => array(
      array(
        'islandora_checksum_enable_object_checksums',
        array(
          $collection_pid,
          $limit,
          $dsids,
        ),
      ),
    ),
    'title' => 'Enabling checksums',
    'finished' => 'islandora_checksum_batch_finished',
    'init_message' => t('Getting objects to checksum ...'),
    'progress_message' => t('Time elapsed: @elapsed <br/>Estimated time remaining: @estimate.'),
    'error_message' => t('An error occurred and not all checksums were set.'),
  );
}

/**
 * Batch process to enable checksums for a collection's children.
 *
 * @param string $collection
 *   The PID of the collection.
 * @param int $limit
 *   The number of items to do per-iteration.
 * @param array $dsids
 *   The datastream DSIDs to target.
 * @param array $context
 *   The batch context.
 */
function islandora_checksum_enable_object_checksums($collection, $limit, $dsids, &$context) {
  $sandbox = &$context['sandbox'];
  module_load_include('inc', 'islandora_checksum', 'includes/checksum');
  if (empty($sandbox)) {
    $sandbox['total'] = islandora_checksum_get_collection_member_details($collection, TRUE);
    if ($sandbox['total'] == 0) {
      $context['message'] = t('No objects to apply checksums to.');
      $context['finished'] = 1;
      return;
    }
    $sandbox['current'] = 0;
    $sandbox['offset_params'] = NULL;
    $sandbox['checksum_type'] = variable_get('islandora_checksum_checksum_type', 'DISABLED');
  }

  $slice = islandora_checksum_get_collection_member_details($collection, FALSE, $limit, $sandbox['offset_params']);
  foreach ($slice as $member) {
    islandora_checksum_set_checksums($member['object']['value'], $dsids, $sandbox['checksum_type']);
    $sandbox['current']++;
    $sandbox['offset_params'] = array(
      'offset_pid' => $member['object']['value'],
      'offset_date' => $member['date']['value'],
    );
    $context['results'][] = $member['object']['value'];
  }

  $context['message'] = t('Set checksums for @current/@total objects.', array(
    '@current' => $sandbox['current'],
    '@total' => $sandbox['total'],
  ));
  $context['finished'] = $sandbox['current'] / $sandbox['total'];
}

/**
 * Batch 'finished' callback.
 */
function islandora_checksum_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('Checksums enabled for @count objects.', array('@count' => count($results))));
  }
  else {
    // An error occurred.
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args',
      array(
        '@operation' => $error_operation[0],
        '@args' => print_r($error_operation[0], TRUE))
        )
    );
  }
}

/**
 * Get array of DSIDs to apply checksums to.
 *
 * @return array
 *   Array of DSIDs, if not empty then only these DSIDs will get checksums.
 */
function islandora_checksum_unpack_dsid_filter() {
  $datastreams_to_check = &drupal_static(__FUNCTION__);
  if (is_null($datastreams_to_check)) {
    if (strlen(variable_get('islandora_checksum_dsids_to_check', ''))) {
      $datastreams_to_check = explode(',',
        variable_get('islandora_checksum_dsids_to_check', ''));
    }
    else {
      $datastreams_to_check = array();
    }
    // Make sure there are no spaces around the DSIDs, so we can get a
    // match in in_array().
    foreach ($datastreams_to_check as &$dsid) {
      $dsid = trim($dsid);
    }
  }
  return $datastreams_to_check;
}

/**
 * Checks if a DSID is in the DSID filter.
 *
 * @param string $dsid
 *   The DSID to check.
 *
 * @return bool
 *   Whether or not the DSID was in the filter.
 */
function islandora_checksum_dsid_is_in_filter($dsid) {
  $filter = islandora_checksum_unpack_dsid_filter();
  if (count($filter) === 0) {
    return TRUE;
  }
  else {
    return in_array($dsid, $filter);
  }
}
