<?php

/**
 * @file
 * Plugin for the Islandora BagIt Drupal module.
 *
 * Within the Bag created for the collection, arranges child objects
 * in their own directories as illustrated below.
 */

/**
 * Returns an array of source and destination file paths.
 *
 * Returns FALSE if no datastream files are present.
 *
 * @param object $islandora_object
 *   The Islandora object to create a Bag for.
 *
 * @param array $files_to_add
 *   The list of files generated by the object plugins.
 *
 * @param string $tmp_ds_directory
 *   The temporary directory where the datastream files have been downloaded.
 *
 * @return array
 *   The list of files generated by the object plugins.
 */
function islandora_bagit_plugin_collection_basic_init($islandora_object, $files_to_add, $tmp_ds_directory) {
  /*
  * Collection plugins create object-level directories (or hierarchical
  * groups of them) while allowing object plugins to arrange datastream
  * and other files within those directories. For example, in order to
  * achieve this sort of output arrangement:
  *
  * mybag/
  *   data/
  *      object_89/
  *       object_90/
  *       object_91/
  *           DS1.tif
  *           DS2.jpg
  *           DS3.xml
  *           somefile.xml
  *       object_92/
  *
  * this collection plugin creates an object-level directory in
  * $tmp_ds_directory and then passes back to the main module the
  * $files_to_add array containing the new filepaths.
  *
  * Each collection plugin will be called once per child object and
  * take as a parameter the $files_to_add array after it has been
  * passed through all object plugins. The collection plugin modifies
  * the 'source' and 'dest' members for each file in $files_to_add to
  * include all new path information (like 'object_91' in this example).
  *
  * Also, collection plugins must create any directories in $tmp_ds_directory
  * that are part of the destination path for datastream files and then
  * move them into the new directories before returning the modified
  * $files_to_add array.
  */

  if (!count($files_to_add)) {
    return FALSE;
  }

  // Sanitize the object's PID so it can be used in file paths.
  $clean_pid = str_replace(array(':', '-'), '_', $islandora_object->id);

  // This plugin creates a directory for each object in the batch in
  // $tmp_ds_directory which parallels the arrangement illustrated above.
  $object_tmp_dir = $tmp_ds_directory . DIRECTORY_SEPARATOR . $clean_pid;
  // Create the object-level directory.
  if (!file_exists($object_tmp_dir)) {
    mkdir($object_tmp_dir, 0777, TRUE);
  }

  // For each of the files in $files_to_add, 1) move each file from its
  // original location to the new object-level directories and 2) modify
  // the $files_to_add array so that the source and dest include the
  // object-level directories.
  foreach ($files_to_add as &$file) {
    $object_source_path = $object_tmp_dir . DIRECTORY_SEPARATOR . basename($file['source']);
    // Move the file from its current location in $tmp_ds_directory to its new
    // object-specific location in $object_tmp_dir.
    if (file_exists($file['source'])) {
      rename($file['source'], $object_source_path);
    }
    // Modify the source and destination paths for each file so they can be
    // passed back to the main module to be added to the Bag.
    $file['source'] = $object_source_path;
    // $file['dest'] is relative to the Bag's 'data' directory, as illustrated
    // above.
    $file['dest'] = $clean_pid . DIRECTORY_SEPARATOR . basename($file['source']);
  }

  return $files_to_add;
}
